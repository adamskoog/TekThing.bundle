YT_START = 'embed/'
YT_END = '?wmode'

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
	description = page.xpath("//head//meta[@name='description']")[0].get('content')
	vidwrap = page.xpath("//div[@class='sqs-video-wrapper']")[0].get('data-html')

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = GetThumbUrl(vidwrap)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			container = Container.MP4,
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	html = HTML.ElementFromURL(url)

	video_url = html.xpath('//div[@class="sqs-block-content"]//a[contains(@href, ".mp4")]/@href')

	if len(video_url) < 1:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url[0])

####################################################################################################
def GetThumbUrl(vidwrap):

	startIndex = vidwrap.find(YT_START) + len(YT_START)
	endIndex = vidwrap.find(YT_END)
	return 'http://img.youtube.com/vi/' + vidwrap[startIndex:endIndex] + '/0.jpg'